# <test-name>:
#   filter: <specs-of-a-single-filter-as-string-or-mapping>
#   data: |
#       Input data as block scalar (string).
#       Use the literal style (starts with "|") for better readability.
#       Use a chomping indicator (-/+) to control trailing newlines.
#       Ref:
#         https://yaml.org/spec/1.2/spec.html#id2795688
#         https://yaml.org/spec/1.2/spec.html#id2794534
#   expected_result: |
#       <Expected filtered data>
element_by_tag:
    filter: element-by-tag:body
    data: |
        <html><head></head><body>foo</body></html>
    expected_result: |-
        <body>foo</body>
element_by_tag_nested:
    filter: element-by-tag:div
    data: |
        <html><head></head><body>
        <div>foo</div>
        <div>bar</div>
        </body></html>
    expected_result: |-
        <div>foo</div><div>bar</div>
element_by_id:
    filter: element-by-id:bar
    data: |
        <html><head></head><body>
        <div id="foo">asdf <span>bar</span></div>
        <div id="bar">asdf <span>bar</span> hoho</div>
        </body></html>
    expected_result: |-
        <div id="bar">asdf <span>bar</span> hoho</div>
element_by_class:
    filter: element-by-class:foo
    data: |
        <html><head></head><body>
        <div class="foo">foo</div>
        <div class="bar">bar</div>
        </body></html>
    expected_result: |-
        <div class="foo">foo</div>
xpath_elements:
    filter: xpath://div | //*[@id="bar"]
    data: |
        <html><head></head><body>
        <div>foo</div>
        <div id="bar">bar</div>
        </body></html>
    expected_result: |
        <div>foo</div>
        
        <div id="bar">bar</div>
xpath_text:
    filter: xpath://div[1]/text() | //div[2]/@id
    data: |
        <html><head></head><body>
        <div>foo</div>
        <div id="bar">bar</div>
        </body></html>
    expected_result: |-
        foo
        bar
xpath_exclude:
    filter:
      - xpath:
            path: //div
            exclude: //*[@class='excl'] | //*/@class
    data: |
        <html><head></head><body>
        <div class="excl">you don't want to see me</div>
        <div class="foo">f<span class="excl">interrupt!</span>o<span class="excl">interrupt!</span>o</div>
        <div id="bar">bar</div>
        </body></html>
    expected_result: |
        <div>foo</div>
        
        <div id="bar">bar</div>
xpath_xml_namespaces:
    filter:
      - xpath:
            path: //item | //f:item
            method: xml
            exclude: //f:year | //author
            namespaces:
                f: foo
    data: |
        <feed xmlns:f="foo">
        <item>
        <f:year>2017</f:year>
        <author>Tom</author>
        <data>abc</data>
        </item>
        <f:item>
        <year>2018</year>
        <f:author>Jerry</f:author>
        <data>xyz</data>
        </f:item>
        </feed>
    expected_result: |
        <item xmlns:f="foo">
        
        
        <data>abc</data>
        </item>
        
        <f:item xmlns:f="foo">
        <year>2018</year>
        <f:author>Jerry</f:author>
        <data>xyz</data>
        </f:item>
css:
    filter: css:div
    data: |
        <html><head></head><body>
        <div>foo</div>
        <div>bar</div>
        </body></html>
    expected_result: |
        <div>foo</div>
        
        <div>bar</div>
css_exclude:
    filter:
      - css:
            selector: div
            exclude: '.excl, #bar'
    data: |
        <html><head></head><body>
        <div class="excl">you don't want to see me</div>
        <div class="foo">f<span class="excl">interrupt!</span>o<span class="excl">interrupt!</span>o</div>
        <div id="bar">bar</div>
        </body></html>
    expected_result: |
        <div class="foo">foo</div>
css_xml_namespaces:
    filter:
      - css:
            selector: item, f|item
            method: xml
            exclude: f|year, author
            namespaces:
                f: foo
    data: |
        <feed xmlns:f="foo">
        <item>
        <f:year>2017</f:year>
        <author>Tom</author>
        <data>abc</data>
        </item>
        <f:item>
        <year>2018</year>
        <f:author>Jerry</f:author>
        <data>xyz</data>
        </f:item>
        </feed>
    expected_result: |
        <item xmlns:f="foo">
        
        
        <data>abc</data>
        </item>
        
        <f:item xmlns:f="foo">
        <year>2018</year>
        <f:author>Jerry</f:author>
        <data>xyz</data>
        </f:item>
grep:
    filter: grep:blue
    data: |
        The rose is red;
        the violet's blue.
        Sugar is sweet,
        and so are you.
    expected_result: |-
        the violet's blue.
grep_with_comma:
    filter: grep:\054
    data: |
        The rose is red;
        the violet's blue.
        Sugar is sweet,
        and so are you.
    expected_result: |-
        Sugar is sweet,
json_format:
    filter: format-json
    data: |
        {"field1": {"f1.1": "value"},"field2": "value"}
    expected_result: |-
        {
            "field1": {
                "f1.1": "value"
            },
            "field2": "value"
        }
json_format_subfilter:
    filter: format-json:2
    data: |
        {"field1": {"f1.1": "value"},"field2": "value"}
    expected_result: |-
        {
          "field1": {
            "f1.1": "value"
          },
          "field2": "value"
        }
sha1:
    filter: sha1sum
    data: 1234567890abcdefg
    expected_result: 8417680c09644df743d7cea1366fbe13a31b2d5e
hexdump:
    filter: hexdump
    data: |
        Hello world!
        你好，世界！
    expected_result: |-
        48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a e4 bd a0  Hello world!....
        e5 a5 bd ef bc 8c e4 b8 96 e7 95 8c ef bc 81 0a  ................
sort:
    filter: sort
    data: |-
        The rose is red;
        the violet's blue.
        Sugar is sweet,
        and so are you.
    expected_result: |-
        and so are you.
        Sugar is sweet,
        The rose is red;
        the violet's blue.
sort_paragraphs:
    filter:
      - sort:
          separator: "\n\n"
    data: |-
        Chimpanzee is a species of great ape native
        to the forest and savannah of tropical Africa.

        Aardvark is a medium-sized, burrowing,
        nocturnal mammal native to Africa.

        Bandicoots are a group of more than 20
        species of small to medium-sized,
        terrestrial marsupial omnivores in
        the order Peramelemorphia.
    expected_result: |-
        Aardvark is a medium-sized, burrowing,
        nocturnal mammal native to Africa.

        Bandicoots are a group of more than 20
        species of small to medium-sized,
        terrestrial marsupial omnivores in
        the order Peramelemorphia.

        Chimpanzee is a species of great ape native
        to the forest and savannah of tropical Africa.
sort_separator_reverse:
  filter:
    - sort:
        separator: '%'
        reverse: true
  data: '3%2%4%1'
  expected_result: '4%3%2%1'
sort_reverse:
  filter:
    - sort:
        reverse: true
  data: "a\nc\nb"
  expected_result: "c\nb\na"
reverse_lines:
    filter: reverse
    data: |-
        A
        C
        B
        D
    expected_result: |-
        D
        B
        C
        A
reverse_separator_dict:
  filter:
    - reverse:
        separator: '|'
  data: '1|5|3|4|2'
  expected_result: '2|4|3|5|1'
reverse_separator_str:
  filter:
    - reverse: '%'
  data: 'Hello%World'
  expected_result: 'World%Hello'
reverse_separator_paragraph:
  filter:
    - reverse: "\n\n"
  data: |-
    A paragraph.

    Another paragraph that goes
    over two lines.

    And the third one that
    incidentally goes over
    three lines total.
  expected_result: |-
    And the third one that
    incidentally goes over
    three lines total.

    Another paragraph that goes
    over two lines.

    A paragraph.
re_sub_multiline:
  filter:
    - re.sub: '(?m)^jQuery.*'
  data: |-
    One Line
    jQuery Line
    Another Line
  expected_result: |-
    One Line
    
    Another Line
